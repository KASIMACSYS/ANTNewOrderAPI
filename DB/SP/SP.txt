GO
/****** Object:  StoredProcedure [dbo].[MA_GetLatestBusinessPeriodID]    Script Date: 12/28/2020 3:26:25 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[MA_GetLatestBusinessPeriodID] 
	-- Add the parameters for the stored procedure here
	@CID				INT

--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT Top 1 BusinessPeriodID FROM [BusinessPeriodMaster] WHERE CID=@CID ORDER BY BusinessPeriodID DESC;
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author: <Author,,Name>
-- Create date: <Create Date,,>
-- Description: <Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[MA_GetConfigParam]
-- Add the parameters for the stored procedure here
	@CID			INT,
	@GroupID		INT	
--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN

	SET NOCOUNT ON;	
	select tag, value from [configparam];
	select tag, value from [GroupMgtGeneralSettings] WHERE CID = @CID AND GROUPID = @GroupID;
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[MA_GetSalesmanIDByLedgerID] 
	-- Add the parameters for the stored procedure here
	@CID				INT,
	@LedgerID			INT,
	@SalesmanID			INT		OUTPUT

--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT @SalesmanID = ISNULL(SalesmanID, 0) FROM [SalesMan] WHERE CID=@CID AND EmployeeLedgerID = @LedgerID;
END

GO
/****** Object:  StoredProcedure [dbo].[GetCustomer]    Script Date: 12/22/2020 11:30:40 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[MA_GetCustomer] 
	-- Add the parameters for the stored procedure here
	@CID				INT

--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT LedgerID AS id, MerchantName AS name FROM [MerchantMaster] WHERE CID=@CID ORDER BY MerchantName;
END

GO
/****** Object:  StoredProcedure [dbo].[GetQuotationAgainstSalesman1]    Script Date: 12/22/2020 11:31:36 AM ******/
GO
/****** Object:  StoredProcedure [dbo].[MA_GetSalesmanOrder]    Script Date: 12/28/2020 9:03:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[MA_GetSalesmanOrder] 
	-- Add the parameters for the stored procedure here
	@CID				INT,
	@SalesmanID			INT,
	@Status				VARCHAR(20)='ALL'
--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @Status = 'ALL'		
		SELECT		CONVERT(varchar, SODate, 23) AS QtnDate, Alias AS Name, LedgerID, QtnNo, SOStatus AS Status
		FROM		[SalesOrderMain] 
		WHERE		CID = @CID AND SalesManID = @SalesmanID --AND (QtnDate BETWEEN @FromDate AND @ToDate)
		ORDER BY	CreatedDate
	ELSE
		SELECT		CONVERT(varchar, SODate, 23) AS QtnDate, Alias AS Name, LedgerID, QtnNo, SOStatus AS Status
		FROM		[SalesOrderMain] 
		WHERE		CID = @CID AND SalesManID = @SalesmanID AND SOStatus = @Status --AND (QtnDate BETWEEN @FromDate AND @ToDate) 
		ORDER BY	CreatedDate
END

GO
/****** Object:  StoredProcedure [dbo].[GetQuotationAgainstSalesman]    Script Date: 12/22/2020 11:32:13 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[MA_GetQuotationAgainstSalesman] 
	-- Add the parameters for the stored procedure here
	@CID				INT,
	@SalesmanID			INT,
	@FromDate			DATE,
	@ToDate				DATE,
	@Status				VARCHAR(20)='ALL'
--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @Status = 'ALL'		
		SELECT		CONVERT(varchar, QtnDate, 23) AS QtnDate, Alias AS Name, LedgerID, QtnNo, QtnStatus AS Status
		FROM		[QuotationMain] 
		WHERE		CID = @CID AND SalesManID = @SalesmanID --AND (QtnDate BETWEEN @FromDate AND @ToDate)
		ORDER BY	CreatedDate
	ELSE
		SELECT		CONVERT(varchar, QtnDate, 23) AS QtnDate, Alias AS Name, LedgerID, QtnNo, QtnStatus AS Status
		FROM		[QuotationMain] 
		WHERE		CID = @CID AND SalesManID = @SalesmanID AND QtnStatus = @Status --AND (QtnDate BETWEEN @FromDate AND @ToDate) 
		ORDER BY	CreatedDate
END

GO
/****** Object:  StoredProcedure [dbo].[MA_GetItemList]    Script Date: 12/24/2020 9:51:21 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author: <Author,,Name>
-- Create date: <Create Date,,>
-- Description: <Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[MA_GetItemList]
-- Add the parameters for the stored procedure here
	@CID			INT		
--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN

	SET NOCOUNT ON;
	select ItemCode as code, Alias1 as [desc] from [ItemMaster] WHERE CID = @CID AND InActive = 0;
END

GO
/****** Object:  StoredProcedure [dbo].[MA_ItemPriceList]    Script Date: 12/24/2020 11:33:14 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MA_ItemPriceList]
 -- Add the parameters for the stored procedure here
	 @CID			INT,
	 @ItemCode		VARCHAR(500),
	 @SalesManID	INT = 0,	 
	 @BarCode		VARCHAR(100) = ''
 
--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN  --- load to ItemMCCB
 SET NOCOUNT ON;
 
	 DECLARE @SQLSTRING NVARCHAR(MAX);
 
	 if(@BarCode!='')
		 Select @ItemCode = ItemCode from ItemBarCode where CID = @CID AND BarCode = @BarCode;


	 Select ItemCode, ItemDesc1 AS Description, Stock, Wac from  ITEMMASTER IM where CID = @CID AND ItemCode=@ItemCode;
 
	 if(@SalesManID=0)
		Select PriceType, SalesPrice from ITEMPRICE where CID = @CID AND ItemCode=@ItemCode;
	 else
	 	 Select ITP.PriceType, SalesPrice from ItemPrice ITP inner join SalesManPriceType SPT on ITP.CID = SPT.CID AND  ITP.PriceType = SPT.PriceType 
						where ITP.CID = @CID AND ItemCode = @ItemCode and SPT.SalesManID = @SalesManID;

	
	 --SELECT @BarCode,@ItemCode,@ITEMCODE2,'ITEMMASTER';
END

GO
/****** Object:  StoredProcedure [dbo].[MA_OrderDashboard]    Script Date: 12/28/2020 9:07:26 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MA_OrderDashboard]
 -- Add the parameters for the stored procedure here
	 @CID			INT,
	 @SalesManID	INT = 0
 
--UNLOCK-- WITH ENCRYPTION 
 AS 
 BEGIN  --- load to ItemMCCB
 SET NOCOUNT ON;
 
	 select SOStatus, Count(*) Cnt from [SalesOrderMain] where cid = @CID and salesmanID = @SalesManID group by SOStatus;

	SELECT convert(char(6), SODate, 112) AS Month,
			COUNT (CASE WHEN SOStatus = 'Open' THEN 1 END) AS [Open],
			COUNT (CASE WHEN SOStatus = 'Close' THEN 1 END) AS [Close],
			COUNT (CASE WHEN SOStatus = 'Partial' THEN 1 END) AS [Partial],
			COUNT (CASE WHEN SOStatus = 'Manually Closed' THEN 1 END) AS [ManualClose]
	 FROM   [SalesOrderMain]
	 WHERE  CID = @CID and SalesManID = @SalesManID and datediff (MONTH, SODate, sysdatetime()) < 4
	 GROUP  BY convert(char(6), SODate, 112)
	 ORDER  BY Month DESC

	 --select FORMAT(QtnDate, 'MMM') as [Month], [Open], [Partial], [Closed] from [SalesOrderMain] 
		--pivot (Count(QtnStatus) for QtnStatus in ([Open], [Partial], [Closed])) as pivottable
	 --where CID = @CID and SalesManID = @SalesManID and QtnDate >= DATEADD(mm,-3,getdate()) --order by QtnDate
END